import os
import time
import logging
from web3 import Web3, exceptions
from web3.middleware import geth_poa_middleware
from telegram import Bot
from telegram.error import TelegramError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('talus_claimer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TalusClaimer:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.private_key = os.getenv('PRIVATE_KEY')
        self.telegram_token = os.getenv('TELEGRAM_TOKEN')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.rpc_url = os.getenv('RPC_URL', 'https://rpc.talus.network')
        
        # –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        self.loyalty_contract_address = Web3.to_checksum_address(
            os.getenv('LOYALTY_CONTRACT_ADDRESS', '0x123...')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        )
        
        # ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–π ABI)
        self.loyalty_contract_abi = [
            {
                "inputs": [{"internalType": "address", "name": "user", "type": "address"}],
                "name": "claimDailyReward",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self.w3 = Web3(Web3.HTTPProvider(self.rpc_url))
        self.w3.middleware_onion.inject(geth_poa_middleware, layer=0)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self.tg_bot = Bot(token=self.telegram_token) if self.telegram_token else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.w3.is_connected():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC —É–∑–ª—É")

    def get_wallet_address(self):
        """–ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        account = self.w3.eth.account.from_key(self.private_key)
        return account.address

    def claim_daily_reward(self, retries=3, delay=10):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–µ–π–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
        contract = self.w3.eth.contract(
            address=self.loyalty_contract_address,
            abi=self.loyalty_contract_abi
        )
        
        wallet_address = self.get_wallet_address()
        nonce = self.w3.eth.get_transaction_count(wallet_address)
        
        tx_data = {
            'from': wallet_address,
            'nonce': nonce,
            'gas': 200000,
            'gasPrice': self.w3.eth.gas_price
        }
        
        for attempt in range(retries):
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                tx = contract.functions.claimDailyReward(wallet_address).build_transaction(tx_data)
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                signed_tx = self.w3.eth.account.sign_transaction(tx, self.private_key)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
                
                if receipt.status == 1:
                    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∫–ª–µ–π–º! Tx hash: {tx_hash.hex()}")
                    self.send_telegram_notification(
                        f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª–µ–π–º–ª–µ–Ω–∞!\n"
                        f"–ê–¥—Ä–µ—Å: {wallet_address}\n"
                        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {self.get_explorer_url(tx_hash.hex())}"
                    )
                    return True
                else:
                    logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. Tx hash: {tx_hash.hex()}")
                    raise Exception("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    
            except exceptions.ContractLogicError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {str(e)}"
                logger.error(error_msg)
                self.send_telegram_notification(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–µ–π–º–µ: {error_msg}")
                return False
                
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                if attempt < retries - 1:
                    time.sleep(delay)
                else:
                    self.send_telegram_notification(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–ª–µ–π–º–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.\n"
                        f"–û—à–∏–±–∫–∞: {str(e)}"
                    )
                    return False
        return False

    def get_explorer_url(self, tx_hash):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
        return f"https://explorer.talus.network/tx/{tx_hash}"

    def send_telegram_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        if not self.tg_bot:
            logger.warning("Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return
            
        try:
            self.tg_bot.send_message(chat_id=self.telegram_chat_id, text=message)
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            wallet_address = self.get_wallet_address()
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {wallet_address}")
            
            self.send_telegram_notification(
                f"Ì†ΩÌ¥Ñ –ë–æ—Ç Talus Claimer –∑–∞–ø—É—â–µ–Ω\n"
                f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–µ–π–º
            success = self.claim_daily_reward()
            
            if success:
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            else:
                logger.error("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.send_telegram_notification(f"Ì†ΩÌ¥• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(e)}")
            raise


if __name__ == "__main__":
    try:
        claimer = TalusClaimer()
        claimer.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")